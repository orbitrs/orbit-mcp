# Orbit MCP (Model Context Protocol) CI Pipeline
# This is the standalone workflow for the orbit-mcp repository

name: Orbit MCP CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering
    inputs:
      skip_tests:
        description: 'Skip tests (useful for utility dependencies)'
        required: false
        default: 'false'
        type: boolean
      force_build:
        description: 'Force build even if no changes'
        required: false
        default: 'false'
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Fast check for orbit-mcp
  fast-check:
    name: Fast Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
      with:
        key: orbit-mcp
    
    - name: Install MCP-specific dependencies
      run: |
        # Install Node.js for potential MCP tooling
        curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
        sudo apt-get install -y nodejs
        
        # Install any MCP-specific system dependencies
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev
    
    - name: Check workspace
      run: cargo check --all-targets

  # Comprehensive testing
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    needs: [fast-check]
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    continue-on-error: true  # Don't fail the entire pipeline
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false  # Continue with other OS tests even if one fails
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
    - uses: Swatinem/rust-cache@v2
      with:
        key: orbit-mcp-${{ matrix.os }}
    
    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
        sudo apt-get install -y nodejs pkg-config libssl-dev
    
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        # Install Node.js via Chocolatey if needed
        if (!(Get-Command node -ErrorAction SilentlyContinue)) {
          choco install nodejs -y
        }
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install node
    
    - name: Run tests
      run: cargo test --all-targets
    
    - name: Run clippy
      run: cargo clippy --all-targets -- -D warnings
    
    - name: Check formatting
      run: cargo fmt --all -- --check

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [fast-check]
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
      with:
        key: orbit-mcp-build
    
    - name: Install build dependencies
      run: |
        curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
        sudo apt-get install -y nodejs pkg-config libssl-dev
    
    - name: Build in release mode
      run: cargo build --release --all-targets

  # Documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [fast-check]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
      with:
        key: orbit-mcp-docs
    
    - name: Generate documentation
      run: cargo doc --no-deps --all-features
    
    - name: Upload docs artifact
      uses: actions/upload-artifact@v4
      with:
        name: orbit-mcp-docs
        path: target/doc
        retention-days: 7

  # Status report
  status:
    name: Status Report
    runs-on: ubuntu-latest
    needs: [fast-check, test, build, docs]
    if: always()
    steps:
    - name: Generate status report
      run: |
        echo "# 🛰️ Orbit MCP Pipeline Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Report job statuses
        echo "## Job Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Fast check
        if [[ "${{ needs.fast-check.result }}" == "success" ]]; then
          echo "- ✅ **Fast Check**: Passed" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.fast-check.result }}" == "failure" ]]; then
          echo "- ❌ **Fast Check**: Failed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⏭️ **Fast Check**: Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Test suite
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "- ✅ **Test Suite**: Passed" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.test.result }}" == "failure" ]]; then
          echo "- ⚠️ **Test Suite**: Failed (non-blocking)" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⏭️ **Test Suite**: Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Build
        if [[ "${{ needs.build.result }}" == "success" ]]; then
          echo "- ✅ **Build**: Passed" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.build.result }}" == "failure" ]]; then
          echo "- ❌ **Build**: Failed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⏭️ **Build**: Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Docs
        if [[ "${{ needs.docs.result }}" == "success" ]]; then
          echo "- ✅ **Documentation**: Generated" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.docs.result }}" == "failure" ]]; then
          echo "- ❌ **Documentation**: Failed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⏭️ **Documentation**: Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add manual trigger info
        echo "## Manual Control" >> $GITHUB_STEP_SUMMARY
        echo "This workflow can be triggered manually with options:" >> $GITHUB_STEP_SUMMARY
        echo "- **Skip Tests**: Useful when only checking utility dependencies" >> $GITHUB_STEP_SUMMARY
        echo "- **Force Build**: Build even when no orbit-mcp changes detected" >> $GITHUB_STEP_SUMMARY
